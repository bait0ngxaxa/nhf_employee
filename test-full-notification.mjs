// Comprehensive test for both Email and LINE notifications
// Run with: node test-full-notification.mjs

import { emailService } from './lib/email.js';
import { lineNotificationService } from './lib/line.js';

async function testFullNotificationSystem() {
  console.log('üöÄ NHF Notification System Test\n');

  // Test data ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á ticket
  const testTicketData = {
    ticketId: 999,
    title: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô - Email + LINE',
    description: '‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£\n\n‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á Email ‡πÅ‡∏•‡∏∞ LINE notification\n\n‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞ LINE ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥!',
    category: 'OTHER',
    priority: 'HIGH', // ‡πÉ‡∏ä‡πâ HIGH ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö IT team notification ‡∏î‡πâ‡∏ß‡∏¢
    status: 'OPEN',
    reportedBy: {
      name: '‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö Notification',
      email: 'baitongxaxaxa1@gmail.com', // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
      department: '‡πÅ‡∏ú‡∏ô‡∏Å‡πÑ‡∏≠‡∏ó‡∏µ'
    },
    createdAt: new Date().toISOString()
  };

  console.log('üìã Test Data:');
  console.log(`   - Ticket #${testTicketData.ticketId}`);
  console.log(`   - Title: ${testTicketData.title}`);
  console.log(`   - Priority: ${testTicketData.priority}`);
  console.log(`   - Reporter: ${testTicketData.reportedBy.name}`);
  console.log('');

  // 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö New Ticket Notification
  console.log('üé´ Testing New Ticket Notification...');
  try {
    // ‡∏™‡πà‡∏á Email
    console.log('  üìß Sending email notification...');
    const emailResult = await emailService.sendNewTicketNotification(testTicketData);
    console.log(`     Email: ${emailResult ? '‚úÖ SUCCESS' : '‚ùå FAILED'}`);

    // ‡∏™‡πà‡∏á LINE
    console.log('  üì± Sending LINE notification...');
    const lineResult = await lineNotificationService.sendNewTicketNotification(testTicketData);
    console.log(`     LINE: ${lineResult ? '‚úÖ SUCCESS' : '‚ùå FAILED'}`);

    console.log(`  üìä New Ticket Result: ${emailResult || lineResult ? '‚úÖ SUCCESS' : '‚ùå FAILED'}`);
  } catch (error) {
    console.log('  ‚ùå New Ticket Test Failed:', error.message);
  }

  console.log('');

  // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Status Update Notification
  console.log('üîÑ Testing Status Update Notification...');
  try {
    const updatedTicketData = {
      ...testTicketData,
      status: 'IN_PROGRESS',
      updatedAt: new Date().toISOString(),
      assignedTo: {
        name: '‡∏ó‡∏µ‡∏°‡πÑ‡∏≠‡∏ó‡∏µ NHF',
        email: 'it-team@nhf.org'
      }
    };

    // ‡∏™‡πà‡∏á Email
    console.log('  üìß Sending status update email...');
    const emailResult = await emailService.sendStatusUpdateNotification(updatedTicketData, 'OPEN');
    console.log(`     Email: ${emailResult ? '‚úÖ SUCCESS' : '‚ùå FAILED'}`);

    // ‡∏™‡πà‡∏á LINE
    console.log('  üì± Sending status update LINE...');
    const lineResult = await lineNotificationService.sendStatusUpdateNotification(updatedTicketData, 'OPEN');
    console.log(`     LINE: ${lineResult ? '‚úÖ SUCCESS' : '‚ùå FAILED'}`);

    console.log(`  üìä Status Update Result: ${emailResult || lineResult ? '‚úÖ SUCCESS' : '‚ùå FAILED'}`);
  } catch (error) {
    console.log('  ‚ùå Status Update Test Failed:', error.message);
  }

  console.log('');

  // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö IT Team Notification (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ HIGH/URGENT priority)
  if (testTicketData.priority === 'HIGH' || testTicketData.priority === 'URGENT') {
    console.log('‚ö° Testing IT Team Notification (High Priority)...');
    try {
      // ‡∏™‡πà‡∏á Email
      console.log('  üìß Sending IT team email...');
      const emailResult = await emailService.sendITTeamNotification(testTicketData);
      console.log(`     Email: ${emailResult ? '‚úÖ SUCCESS' : '‚ùå FAILED'}`);

      // ‡∏™‡πà‡∏á LINE
      console.log('  üì± Sending IT team LINE...');
      const lineResult = await lineNotificationService.sendITTeamNotification(testTicketData);
      console.log(`     LINE: ${lineResult ? '‚úÖ SUCCESS' : '‚ùå FAILED'}`);

      console.log(`  üìä IT Team Result: ${emailResult || lineResult ? '‚úÖ SUCCESS' : '‚ùå FAILED'}`);
    } catch (error) {
      console.log('  ‚ùå IT Team Test Failed:', error.message);
    }
  }

  console.log('');
  console.log('üéâ Notification System Test Complete!');
  console.log('');
  console.log('üì± Check your notifications:');
  console.log('   1. Check your email inbox (including spam folder)');
  console.log('   2. Check your LINE messages');
  console.log('   3. Verify all notification types were received');
  console.log('');
  console.log('üîß If notifications failed:');
  console.log('   - Run: node test-line-notification.js (for LINE setup)');
  console.log('   - Run: npm run email:diagnostic (for email setup)');
}

// Run the test
testFullNotificationSystem().catch(console.error);