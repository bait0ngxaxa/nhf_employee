// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  name       String    // Full name for display
  password   String
  role       String    @default("USER")
  isActive   Boolean   @default(true) // Account status
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  // Optional relationship with Employee (for staff who have employee records)
  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId Int?      @unique
  
  // Relationships with Tickets
  reportedTickets Ticket[] @relation("ReportedTickets") // tickets ที่แจ้งโดย user นี้
  assignedTickets Ticket[] @relation("AssignedTickets") // tickets ที่ได้รับมอบหมาย (สำหรับ admin)
  comments TicketComment[] // comments ที่เขียนโดย user นี้
  ticketViews TicketView[] // tickets ที่ user นี้เคยดูแล้ว

  @@map("users")
}

model Employee {
  id          Int       @id @default(autoincrement())
  firstName   String    // ชื่อ
  lastName    String    // นามสกุล
  nickname    String?   // ชื่อเล่น
  phone       String?   // โทร
  email       String    @unique // อีเมล
  position    String    // ตำแหน่ง
  affiliation String?   // สังกัด
  hireDate    DateTime  @default(now()) // วันที่เข้าทำงาน
  status      EmployeeStatus @default(ACTIVE) // สถานะพนักงาน
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relationship with User (for login access)
  user        User?
  
  // Relationship with Department
  dept        Department @relation(fields: [departmentId], references: [id])
  departmentId Int

  @@map("employees")
}

model Department {
  id          Int        @id @default(autoincrement())
  name        String     @unique // ชื่อแผนก
  code        String     @unique // รหัสแผนก
  description String?    // คำอธิบาย
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relationships
  employees   Employee[]

  @@map("departments")
}

model Ticket {
  id          Int        @id @default(autoincrement())
  title       String     // หัวข้อปัญหา
  description String     @db.Text // รายละเอียดปัญหา
  category    TicketCategory // หมวดหมู่ปัญหา
  priority    TicketPriority @default(MEDIUM) // ระดับความสำคัญ
  status      TicketStatus   @default(OPEN) // สถานะ ticket
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  resolvedAt  DateTime?  // วันที่แก้ไขเสร็จ
  
  // ความสัมพันธ์กับผู้แจ้ง (User)
  reportedBy  User       @relation("ReportedTickets", fields: [reportedById], references: [id])
  reportedById Int
  
  // ความสัมพันธ์กับผู้รับผิดชอบ (Admin)
  assignedTo  User?      @relation("AssignedTickets", fields: [assignedToId], references: [id])
  assignedToId Int?
  
  // ความสัมพันธ์กับ comments
  comments    TicketComment[]
  
  // ความสัมพันธ์กับ views
  views       TicketView[]

  @@map("tickets")
}

model TicketComment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text // ความคิดเห็น
  createdAt DateTime @default(now())
  
  // ความสัมพันธ์กับ ticket
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId  Int
  
  // ความสัมพันธ์กับผู้เขียนความคิดเห็น
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int

  @@map("ticket_comments")
}

model TicketView {
  id       Int      @id @default(autoincrement())
  viewedAt DateTime @default(now())
  
  // ความสัมพันธ์กับ ticket
  ticket   Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId Int
  
  // ความสัมพันธ์กับผู้ดู
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  
  // Unique constraint to prevent duplicate views
  @@unique([ticketId, userId])
  @@map("ticket_views")
}

enum EmployeeStatus {
  ACTIVE      // ปฏิบัติงาน
  INACTIVE    // ลาออก
  SUSPENDED   // ถูกระงับ
}

enum TicketCategory {
  HARDWARE    // ฮาร์ดแวร์
  SOFTWARE    // ซอฟต์แวร์
  NETWORK     // เครือข่าย
  ACCOUNT     // บัญชีผู้ใช้
  EMAIL       // อีเมล
  PRINTER     // เครื่องพิมพ์
  OTHER       // อื่นๆ
}

enum TicketPriority {
  LOW         // ต่ำ
  MEDIUM      // ปานกลาง
  HIGH        // สูง
  URGENT      // เร่งด่วน
}

enum TicketStatus {
  OPEN        // เปิด
  IN_PROGRESS // กำลังดำเนินการ
  RESOLVED    // แก้ไขแล้ว
  CLOSED      // ปิด
  CANCELLED   // ยกเลิก
}
