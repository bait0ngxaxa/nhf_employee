// Test script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE Messaging API
// Run with: node test-line-notification.js

require('dotenv').config({ path: '.env.local' });

async function testLineMessagingAPI() {
  console.log('üì± LINE Messaging API Test\n');

  // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment Variables
  console.log('üìã Environment Variables Check:');
  console.log('  ‚úì LINE_CHANNEL_ACCESS_TOKEN:', process.env.LINE_CHANNEL_ACCESS_TOKEN ? '‚úÖ CONFIGURED' : '‚ùå NOT SET');
  console.log('  ‚úì LINE_IT_TEAM_USER_ID:', process.env.LINE_IT_TEAM_USER_ID ? '‚úÖ CONFIGURED' : '‚ùå NOT SET');
  console.log('  ‚úì LINE_WEBHOOK_URL:', process.env.LINE_WEBHOOK_URL ? '‚úÖ CONFIGURED' : '‚ùå NOT SET');
  console.log('  ‚úì NEXTAUTH_URL:', process.env.NEXTAUTH_URL || '‚ùå NOT SET');

  // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE Messaging API Push Message
  if (process.env.LINE_CHANNEL_ACCESS_TOKEN && process.env.LINE_CHANNEL_ACCESS_TOKEN !== 'your-channel-access-token-here') {
    console.log('\nüß™ Testing LINE Messaging API...');
    
    const testUserId = process.env.LINE_IT_TEAM_USER_ID;
    
    if (!testUserId || testUserId === 'your-it-team-user-id-here') {
      console.log('  ‚ö†Ô∏è LINE_IT_TEAM_USER_ID ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Broadcast ‡πÅ‡∏ó‡∏ô');
      
      // Test Broadcast Message
      try {
        const testMessage = {
          type: 'text',
          text: 'üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE Messaging API\n\nüìã ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö NHF IT Support\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ' + new Date().toLocaleString('th-TH') + '\n\n‚úÖ ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ LINE Messaging API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥!\n\n--------------------\nNHF IT Support System'
        };

        const response = await fetch('https://api.line.me/v2/bot/message/broadcast', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${process.env.LINE_CHANNEL_ACCESS_TOKEN}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            messages: [testMessage]
          }),
        });

        if (response.ok) {
          console.log('  ‚úÖ LINE Broadcast test ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô LINE OA');
        } else {
          const errorText = await response.text();
          console.log('  ‚ùå LINE Broadcast test ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', response.status, errorText);
          
          if (response.status === 401) {
            console.log('  üí° Channel Access Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LINE_CHANNEL_ACCESS_TOKEN');
          }
        }
      } catch (error) {
        console.log('  ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
      }
    } else {
      // Test Push Message to specific user
      try {
        const testMessage = {
          type: 'text',
          text: 'üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE Messaging API\n\nüìã ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö NHF IT Support\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ' + new Date().toLocaleString('th-TH') + '\n\n‚úÖ ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ LINE Messaging API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥!\n\n--------------------\nNHF IT Support System'
        };

        const response = await fetch('https://api.line.me/v2/bot/message/push', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${process.env.LINE_CHANNEL_ACCESS_TOKEN}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            to: testUserId,
            messages: [testMessage]
          }),
        });

        if (response.ok) {
          console.log('  ‚úÖ LINE Push Message test ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô LINE');
        } else {
          const errorText = await response.text();
          console.log('  ‚ùå LINE Push Message test ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', response.status, errorText);
          
          if (response.status === 401) {
            console.log('  üí° Channel Access Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LINE_CHANNEL_ACCESS_TOKEN');
          } else if (response.status === 400) {
            console.log('  üí° User ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LINE_IT_TEAM_USER_ID');
          }
        }
      } catch (error) {
        console.log('  ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
      }
    }
  } else {
    console.log('\n‚ö†Ô∏è LINE_CHANNEL_ACCESS_TOKEN ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ - ‡∏Ç‡πâ‡∏≤‡∏° LINE Messaging API test');
  }

  // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE Webhook
  if (process.env.LINE_WEBHOOK_URL && process.env.LINE_WEBHOOK_URL !== 'your-line-webhook-url-here') {
    console.log('\nüß™ Testing LINE Webhook...');
    try {
      const testData = {
        type: 'test',
        message: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE Webhook',
        timestamp: new Date().toISOString(),
        data: {
          test: true,
          system: 'NHF IT Support'
        }
      };

      const response = await fetch(process.env.LINE_WEBHOOK_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(testData),
      });

      if (response.ok) {
        console.log('  ‚úÖ LINE Webhook test ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      } else {
        console.log('  ‚ùå LINE Webhook test ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', response.status);
      }
    } catch (error) {
      console.log('  ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    }
  } else {
    console.log('\n‚ö†Ô∏è LINE_WEBHOOK_URL ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ - ‡∏Ç‡πâ‡∏≤‡∏° Webhook test');
  }

  console.log('\nüìù ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Messaging API:');
  console.log('\n1. üì± LINE Messaging API (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE Official Account):');
  console.log('   - ‡πÑ‡∏õ‡∏ó‡∏µ‡πà https://developers.line.biz/console/');
  console.log('   - ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE Business Account');
  console.log('   - ‡∏™‡∏£‡πâ‡∏≤‡∏á Provider ‡πÅ‡∏•‡∏∞ Channel ‡πÉ‡∏´‡∏°‡πà (‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà)');
  console.log('   - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Messaging API" ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Channel');
  console.log('   - ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å "Channel Access Token" ‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÉ‡∏ô LINE_CHANNEL_ACCESS_TOKEN');
  
  console.log('\n2. üîó LINE Webhook (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE OA):');
  console.log('   - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Webhook URL ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Channel');
  console.log('   - ‡πÉ‡∏™‡πà URL ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô LINE_WEBHOOK_URL');

  console.log('\n3. üë§ ‡∏Å‡∏≤‡∏£‡∏´‡∏≤ User ID:');
  console.log('   - ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Add LINE OA ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô');
  console.log('   - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏î‡πÜ ‡πÑ‡∏õ‡∏¢‡∏±‡∏á webhook ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π User ID');
  console.log('   - ‡πÉ‡∏™‡πà User ID ‡πÉ‡∏ô LINE_IT_TEAM_USER_ID');

  console.log('\n‚úÖ LINE Messaging API Test ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
}

// Run the test
testLineMessagingAPI().catch(console.error);